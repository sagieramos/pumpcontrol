// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
import encodings from 'protocol-buffers-encodings';
const { varint, skip } = encodings;

export const Num = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null,
};

export const Numlist = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null,
};

export const Str = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null,
};

export const Strlist = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null,
};

export const Strnum = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null,
};

export const Strnumlist = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null,
};

defineNum();
defineNumlist();
defineStr();
defineStrlist();
defineStrnum();
defineStrnumlist();

function defineNum() {
  Num.encodingLength = encodingLength;
  Num.encode = encode;
  Num.decode = decode;

  function encodingLength(obj) {
    let length = 0;
    if (defined(obj.key)) {
      const len = varint.encodingLength(obj.key);
      length += 1 + len;
    }
    if (defined(obj.value)) {
      const len = encodings.float.encodingLength(obj.value);
      length += 1 + len;
    }
    return length;
  }

  function encode(obj, buf, offset = 0) {
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj));
    const oldOffset = offset;
    if (defined(obj.key)) {
      buf[offset++] = 8;
      varint.encode(obj.key, buf, offset);
      offset += varint.encode.bytes;
    }
    if (defined(obj.value)) {
      buf[offset++] = 21;
      encodings.float.encode(obj.value, buf, offset);
      offset += encodings.float.encode.bytes;
    }
    encode.bytes = offset - oldOffset;
    return buf;
  }

  function decode(buf, offset = 0, end = buf.length) {
    if (!(end <= buf.length && offset <= buf.length)) throw new Error('Decoded message is not valid');
    const oldOffset = offset;
    const obj = {
      key: 0,
      value: 0,
    };
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset;
        return obj;
      }
      const prefix = varint.decode(buf, offset);
      offset += varint.decode.bytes;
      const tag = prefix >> 3;
      switch (tag) {
        case 1:
          obj.key = varint.decode(buf, offset);
          offset += varint.decode.bytes;
          break;
        case 2:
          obj.value = encodings.float.decode(buf, offset);
          offset += encodings.float.decode.bytes;
          break;
        default:
          offset = skip(prefix & 7, buf, offset);
      }
    }
  }
}

function defineNumlist() {
  Numlist.encodingLength = encodingLength;
  Numlist.encode = encode;
  Numlist.decode = decode;

  function encodingLength(obj) {
    let length = 0;
    if (defined(obj.numbers)) {
      for (const number of obj.numbers) {
        if (!defined(number)) continue;
        const len = Num.encodingLength(number);
        length += varint.encodingLength(len);
        length += 1 + len;
      }
    }
    return length;
  }

  function encode(obj, buf, offset = 0) {
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj));
    const oldOffset = offset;
    if (defined(obj.numbers)) {
      for (const number of obj.numbers) {
        if (!defined(number)) continue;
        buf[offset++] = 10;
        varint.encode(Num.encodingLength(number), buf, offset);
        offset += varint.encode.bytes;
        Num.encode(number, buf, offset);
        offset += Num.encode.bytes;
      }
    }
    encode.bytes = offset - oldOffset;
    return buf;
  }

  function decode(buf, offset = 0, end = buf.length) {
    if (!(end <= buf.length && offset <= buf.length)) throw new Error('Decoded message is not valid');
    const oldOffset = offset;
    const obj = {
      numbers: [],
    };
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset;
        return obj;
      }
      const prefix = varint.decode(buf, offset);
      offset += varint.decode.bytes;
      const tag = prefix >> 3;
      switch (tag) {
        case 1:
          const len = varint.decode(buf, offset);
          offset += varint.decode.bytes;
          obj.numbers.push(Num.decode(buf, offset, offset + len));
          offset += Num.decode.bytes;
          break;
        default:
          offset = skip(prefix & 7, buf, offset);
      }
    }
  }
}

function defineStr() {
  Str.encodingLength = encodingLength;
  Str.encode = encode;
  Str.decode = decode;

  function encodingLength(obj) {
    let length = 0;
    if (defined(obj.key)) {
      const len = varint.encodingLength(obj.key);
      length += 1 + len;
    }
    if (defined(obj.value)) {
      const len = encodings.string.encodingLength(obj.value);
      length += 1 + len;
    }
    return length;
  }

  function encode(obj, buf, offset = 0) {
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj));
    const oldOffset = offset;
    if (defined(obj.key)) {
      buf[offset++] = 8;
      varint.encode(obj.key, buf, offset);
      offset += varint.encode.bytes;
    }
    if (defined(obj.value)) {
      buf[offset++] = 18;
      encodings.string.encode(obj.value, buf, offset);
      offset += encodings.string.encode.bytes;
    }
    encode.bytes = offset - oldOffset;
    return buf;
  }

  function decode(buf, offset = 0, end = buf.length) {
    if (!(end <= buf.length && offset <= buf.length)) throw new Error('Decoded message is not valid');
    const oldOffset = offset;
    const obj = {
      key: 0,
      value: '',
    };
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset;
        return obj;
      }
      const prefix = varint.decode(buf, offset);
      offset += varint.decode.bytes;
      const tag = prefix >> 3;
      switch (tag) {
        case 1:
          obj.key = varint.decode(buf, offset);
          offset += varint.decode.bytes;
          break;
        case 2:
          obj.value = encodings.string.decode(buf, offset);
          offset += encodings.string.decode.bytes;
          break;
        default:
          offset = skip(prefix & 7, buf, offset);
      }
    }
  }
}

function defineStrlist() {
  Strlist.encodingLength = encodingLength;
  Strlist.encode = encode;
  Strlist.decode = decode;

  function encodingLength(obj) {
    let length = 0;
    if (defined(obj.Str)) {
      for (const str of obj.Str) {
        if (!defined(str)) continue;
        const len = encodings.string.encodingLength(str);
        length += 1 + len;
      }
    }
    return length;
  }

  function encode(obj, buf, offset = 0) {
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj));
    const oldOffset = offset;
    if (defined(obj.Str)) {
      for (const str of obj.Str) {
        if (!defined(str)) continue;
        buf[offset++] = 10;
        encodings.string.encode(str, buf, offset);
        offset += encodings.string.encode.bytes;
      }
    }
    encode.bytes = offset - oldOffset;
    return buf;
  }

  function decode(buf, offset = 0, end = buf.length) {
    if (!(end <= buf.length && offset <= buf.length)) throw new Error('Decoded message is not valid');
    const oldOffset = offset;
    const obj = {
      Str: [],
    };
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset;
        return obj;
      }
      const prefix = varint.decode(buf, offset);
      offset += varint.decode.bytes;
      const tag = prefix >> 3;
      switch (tag) {
        case 1:
          obj.Str.push(encodings.string.decode(buf, offset));
          offset += encodings.string.decode.bytes;
          break;
        default:
          offset = skip(prefix & 7, buf, offset);
      }
    }
  }
}

function defineStrnum() {
  Strnum.encodingLength = encodingLength;
  Strnum.encode = encode;
  Strnum.decode = decode;

  function encodingLength(obj) {
    let length = 0;
    if (defined(obj.key)) {
      const len = varint.encodingLength(obj.key);
      length += 1 + len;
    }
    if (defined(obj.str)) {
      const len = encodings.string.encodingLength(obj.str);
      length += 1 + len;
    }
    if (defined(obj.num)) {
      const len = encodings.float.encodingLength(obj.num);
      length += 1 + len;
    }
    return length;
  }

  function encode(obj, buf, offset = 0) {
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj));
    const oldOffset = offset;
    if (defined(obj.key)) {
      buf[offset++] = 8;
      varint.encode(obj.key, buf, offset);
      offset += varint.encode.bytes;
    }
    if (defined(obj.str)) {
      buf[offset++] = 18;
      encodings.string.encode(obj.str, buf, offset);
      offset += encodings.string.encode.bytes;
    }
    if (defined(obj.num)) {
      buf[offset++] = 29;
      encodings.float.encode(obj.num, buf, offset);
      offset += encodings.float.encode.bytes;
    }
    encode.bytes = offset - oldOffset;
    return buf;
  }

  function decode(buf, offset = 0, end = buf.length) {
    if (!(end <= buf.length && offset <= buf.length)) throw new Error('Decoded message is not valid');
    const oldOffset = offset;
    const obj = {
      key: 0,
      str: '',
      num: 0,
    };
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset;
        return obj;
      }
      const prefix = varint.decode(buf, offset);
      offset += varint.decode.bytes;
      const tag = prefix >> 3;
      switch (tag) {
        case 1:
          obj.key = varint.decode(buf, offset);
          offset += varint.decode.bytes;
          break;
        case 2:
          obj.str = encodings.string.decode(buf, offset);
          offset += encodings.string.decode.bytes;
          break;
        case 3:
          obj.num = encodings.float.decode(buf, offset);
          offset += encodings.float.decode.bytes;
          break;
        default:
          offset = skip(prefix & 7, buf, offset);
      }
    }
  }
}

function defineStrnumlist() {
  Strnumlist.encodingLength = encodingLength;
  Strnumlist.encode = encode;
  Strnumlist.decode = decode;

  function encodingLength(obj) {
    let length = 0;
    if (defined(obj.strnum)) {
      for (const strnum of obj.strnum) {
        if (!defined(strnum)) continue;
        const len = Strnum.encodingLength(strnum);
        length += varint.encodingLength(len);
        length += 1 + len;
      }
    }
    return length;
  }

  function encode(obj, buf, offset = 0) {
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj));
    const oldOffset = offset;
    if (defined(obj.strnum)) {
      for (const strnum of obj.strnum) {
        if (!defined(strnum)) continue;
        buf[offset++] = 10;
        varint.encode(Strnum.encodingLength(strnum), buf, offset);
        offset += varint.encode.bytes;
        Strnum.encode(strnum, buf, offset);
        offset += Strnum.encode.bytes;
      }
    }
    encode.bytes = offset - oldOffset;
    return buf;
  }

  function decode(buf, offset = 0, end = buf.length) {
    if (!(end <= buf.length && offset <= buf.length)) throw new Error('Decoded message is not valid');
    const oldOffset = offset;
    const obj = {
      strnum: [],
    };
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset;
        return obj;
      }
      const prefix = varint.decode(buf, offset);
      offset += varint.decode.bytes;
      const tag = prefix >> 3;
      switch (tag) {
        case 1:
          const len = varint.decode(buf, offset);
          offset += varint.decode.bytes;
          obj.strnum.push(Strnum.decode(buf, offset, offset + len));
          offset += Strnum.decode.bytes;
          break;
        default:
          offset = skip(prefix & 7, buf, offset);
      }
    }
  }
}

function defined(val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val));
}
