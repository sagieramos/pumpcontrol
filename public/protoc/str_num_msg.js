// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var num = exports.num = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var numlst = exports.numlst = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var str = exports.str = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var strlst = exports.strlst = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var strnum = exports.strnum = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var strnumlst = exports.strnumlst = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

definenum()
definenumlst()
definestr()
definestrlst()
definestrnum()
definestrnumlst()

function definenum () {
  num.encodingLength = encodingLength
  num.encode = encode
  num.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.key)) {
      var len = encodings.varint.encodingLength(obj.key)
      length += 1 + len
    }
    if (defined(obj.value)) {
      var len = encodings.float.encodingLength(obj.value)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.key)) {
      buf[offset++] = 8
      encodings.varint.encode(obj.key, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    if (defined(obj.value)) {
      buf[offset++] = 21
      encodings.float.encode(obj.value, buf, offset)
      offset += encodings.float.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      key: 0,
      value: 0
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.key = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        case 2:
        obj.value = encodings.float.decode(buf, offset)
        offset += encodings.float.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function definenumlst () {
  numlst.encodingLength = encodingLength
  numlst.encode = encode
  numlst.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.numbers)) {
      for (var i = 0; i < obj.numbers.length; i++) {
        if (!defined(obj.numbers[i])) continue
        var len = num.encodingLength(obj.numbers[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.numbers)) {
      for (var i = 0; i < obj.numbers.length; i++) {
        if (!defined(obj.numbers[i])) continue
        buf[offset++] = 10
        varint.encode(num.encodingLength(obj.numbers[i]), buf, offset)
        offset += varint.encode.bytes
        num.encode(obj.numbers[i], buf, offset)
        offset += num.encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      numbers: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.numbers.push(num.decode(buf, offset, offset + len))
        offset += num.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function definestr () {
  str.encodingLength = encodingLength
  str.encode = encode
  str.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.key)) {
      var len = encodings.varint.encodingLength(obj.key)
      length += 1 + len
    }
    if (defined(obj.value)) {
      var len = encodings.string.encodingLength(obj.value)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.key)) {
      buf[offset++] = 8
      encodings.varint.encode(obj.key, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    if (defined(obj.value)) {
      buf[offset++] = 18
      encodings.string.encode(obj.value, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      key: 0,
      value: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.key = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        case 2:
        obj.value = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function definestrlst () {
  strlst.encodingLength = encodingLength
  strlst.encode = encode
  strlst.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.str)) {
      for (var i = 0; i < obj.str.length; i++) {
        if (!defined(obj.str[i])) continue
        var len = encodings.string.encodingLength(obj.str[i])
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.str)) {
      for (var i = 0; i < obj.str.length; i++) {
        if (!defined(obj.str[i])) continue
        buf[offset++] = 10
        encodings.string.encode(obj.str[i], buf, offset)
        offset += encodings.string.encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      str: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.str.push(encodings.string.decode(buf, offset))
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function definestrnum () {
  strnum.encodingLength = encodingLength
  strnum.encode = encode
  strnum.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.key)) {
      var len = encodings.varint.encodingLength(obj.key)
      length += 1 + len
    }
    if (defined(obj.str)) {
      var len = encodings.string.encodingLength(obj.str)
      length += 1 + len
    }
    if (defined(obj.num)) {
      var len = encodings.float.encodingLength(obj.num)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.key)) {
      buf[offset++] = 8
      encodings.varint.encode(obj.key, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    if (defined(obj.str)) {
      buf[offset++] = 18
      encodings.string.encode(obj.str, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.num)) {
      buf[offset++] = 29
      encodings.float.encode(obj.num, buf, offset)
      offset += encodings.float.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      key: 0,
      str: "",
      num: 0
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.key = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        case 2:
        obj.str = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 3:
        obj.num = encodings.float.decode(buf, offset)
        offset += encodings.float.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function definestrnumlst () {
  strnumlst.encodingLength = encodingLength
  strnumlst.encode = encode
  strnumlst.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.str_nums)) {
      for (var i = 0; i < obj.str_nums.length; i++) {
        if (!defined(obj.str_nums[i])) continue
        var len = strnum.encodingLength(obj.str_nums[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.str_nums)) {
      for (var i = 0; i < obj.str_nums.length; i++) {
        if (!defined(obj.str_nums[i])) continue
        buf[offset++] = 10
        varint.encode(strnum.encodingLength(obj.str_nums[i]), buf, offset)
        offset += varint.encode.bytes
        strnum.encode(obj.str_nums[i], buf, offset)
        offset += strnum.encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      str_nums: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.str_nums.push(strnum.decode(buf, offset, offset + len))
        offset += strnum.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
