// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.21.12
// source: protoc/str_num_msg.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "";

export interface Num {
  key: number;
  value: number;
}

export interface Numlist {
  numbers: Num[];
}

export interface Str {
  key: number;
  value: string;
}

export interface Strlist {
  Str: string[];
}

export interface Strnum {
  key: number;
  str: string;
  num: number;
}

export interface Strnumlist {
  strNums: Strnum[];
}

function createBaseNum(): Num {
  return { key: 0, value: 0 };
}

export const Num = {
  encode(message: Num, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== 0) {
      writer.uint32(8).uint32(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(21).float(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Num {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = reader.uint32();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.value = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Num {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: Num): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Num>, I>>(base?: I): Num {
    return Num.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Num>, I>>(object: I): Num {
    const message = createBaseNum();
    message.key = object.key ?? 0;
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseNumlist(): Numlist {
  return { numbers: [] };
}

export const Numlist = {
  encode(message: Numlist, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.numbers) {
      Num.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Numlist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNumlist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.numbers.push(Num.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Numlist {
    return {
      numbers: globalThis.Array.isArray(object?.numbers) ? object.numbers.map((e: any) => Num.fromJSON(e)) : [],
    };
  },

  toJSON(message: Numlist): unknown {
    const obj: any = {};
    if (message.numbers?.length) {
      obj.numbers = message.numbers.map((e) => Num.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Numlist>, I>>(base?: I): Numlist {
    return Numlist.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Numlist>, I>>(object: I): Numlist {
    const message = createBaseNumlist();
    message.numbers = object.numbers?.map((e) => Num.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStr(): Str {
  return { key: 0, value: "" };
}

export const Str = {
  encode(message: Str, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== 0) {
      writer.uint32(8).uint32(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Str {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStr();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Str {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Str): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Str>, I>>(base?: I): Str {
    return Str.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Str>, I>>(object: I): Str {
    const message = createBaseStr();
    message.key = object.key ?? 0;
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseStrlist(): Strlist {
  return { Str: [] };
}

export const Strlist = {
  encode(message: Strlist, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.Str) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Strlist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStrlist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.Str.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Strlist {
    return { Str: globalThis.Array.isArray(object?.Str) ? object.Str.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: Strlist): unknown {
    const obj: any = {};
    if (message.Str?.length) {
      obj.Str = message.Str;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Strlist>, I>>(base?: I): Strlist {
    return Strlist.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Strlist>, I>>(object: I): Strlist {
    const message = createBaseStrlist();
    message.Str = object.Str?.map((e) => e) || [];
    return message;
  },
};

function createBaseStrnum(): Strnum {
  return { key: 0, str: "", num: 0 };
}

export const Strnum = {
  encode(message: Strnum, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== 0) {
      writer.uint32(8).uint32(message.key);
    }
    if (message.str !== "") {
      writer.uint32(18).string(message.str);
    }
    if (message.num !== 0) {
      writer.uint32(29).float(message.num);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Strnum {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStrnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.str = reader.string();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.num = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Strnum {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      str: isSet(object.str) ? globalThis.String(object.str) : "",
      num: isSet(object.num) ? globalThis.Number(object.num) : 0,
    };
  },

  toJSON(message: Strnum): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.str !== "") {
      obj.str = message.str;
    }
    if (message.num !== 0) {
      obj.num = message.num;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Strnum>, I>>(base?: I): Strnum {
    return Strnum.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Strnum>, I>>(object: I): Strnum {
    const message = createBaseStrnum();
    message.key = object.key ?? 0;
    message.str = object.str ?? "";
    message.num = object.num ?? 0;
    return message;
  },
};

function createBaseStrnumlist(): Strnumlist {
  return { strNums: [] };
}

export const Strnumlist = {
  encode(message: Strnumlist, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.strNums) {
      Strnum.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Strnumlist {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStrnumlist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.strNums.push(Strnum.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Strnumlist {
    return {
      strNums: globalThis.Array.isArray(object?.strNums) ? object.strNums.map((e: any) => Strnum.fromJSON(e)) : [],
    };
  },

  toJSON(message: Strnumlist): unknown {
    const obj: any = {};
    if (message.strNums?.length) {
      obj.strNums = message.strNums.map((e) => Strnum.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Strnumlist>, I>>(base?: I): Strnumlist {
    return Strnumlist.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Strnumlist>, I>>(object: I): Strnumlist {
    const message = createBaseStrnumlist();
    message.strNums = object.strNums?.map((e) => Strnum.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
